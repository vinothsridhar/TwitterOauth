package twitteroauthview.sample;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.json.JSONException;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.FragmentManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.Settings;
import android.support.v4.app.FragmentActivity;
import android.text.Html;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnCameraChangeListener;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;

public class ViewMap extends FragmentActivity implements LocationListener {

	private GoogleMap mMap;
	double latitude,longitude;
	LinearLayout map_btn_layout;
	Button home,yourlocation,path,shoplocation;
	boolean btn_enabled=false;
	boolean shopLocationEnabled=false;
	boolean yourlocationenabled=true;
	Marker sourceMarker,destMarker;
	TextView pathinstr;
	boolean isGpsEnabled,isNetworkEnabled;
	LocationManager locationManager;
	Location gpslocation;
	double userlat,userlng;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_viewmap);
		
		
		int status=GooglePlayServicesUtil.isGooglePlayServicesAvailable(getApplicationContext());
		if(status!=ConnectionResult.SUCCESS)
		{
			int requestCode=10;
			Dialog dialog=GooglePlayServicesUtil.getErrorDialog(status, this, requestCode);
			dialog.show();
		}
		else
		{
		map_btn_layout.setVisibility(View.VISIBLE);
        FragmentManager fm = getSupportFragmentManager();
		SupportMapFragment f = (SupportMapFragment) fm.findFragmentById(R.id.map);
		mMap = f.getMap();
		getLatLng();
		}
	}
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
	}
	
	
	
	public void setLocation()
	{
		try
		{
			if(gpslocation!=null)
			{
				userlat=gpslocation.getLatitude();
				userlng=gpslocation.getLongitude();
				if(sourceMarker==null)
					sourceMarker=mMap.addMarker(new MarkerOptions().position(new LatLng(userlat, userlng)));
				else
					sourceMarker.setPosition(new LatLng(userlat, userlng));
				mMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(userlat, userlng)));
			}
		}
		catch(Exception e)
		{
			System.out.println(e.toString());
		}
	}
	
	@SuppressLint("ValidFragment")
	private class EnableGpsDialogFragment extends DialogFragment {

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			return new AlertDialog.Builder(getActivity()).setTitle("GPS")
					.setMessage("GPS not enabled.")
					.setPositiveButton("Settings",
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
									Intent settingsIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
									startActivity(settingsIntent);
								}
							}).create();
		}
	}
	
	
	
	//----------------------------------------------------------------------------//
	
	class LoadingmapPath extends AsyncTask<Void, Void, Void>
	{

		DefaultHttpClient httpclient=new DefaultHttpClient(new BasicHttpParams());
		HttpGet httpget;
		InputStream is=null;
		String result=null;
		String title=null;
		HttpResponse response;
		HttpEntity entity;
		BufferedReader reader;
		StringBuilder sb=new StringBuilder();
		String line=null;
		URI uri;
		Context context;
		@Override
		protected Void doInBackground(Void... arg0) {
			// TODO Auto-generated method stub
			//httpget=new HttpGet(URI.create("http://10.0.2.2/RetailmeApp/json"));
			httpget=new HttpGet(URI.create("http://maps.googleapis.com/maps/api/directions/json?origin="+userlat+","+userlng+"&destination="+latitude+","+longitude+"&sensor=false&units=metrics&mode=driving"));
			try {
				response=httpclient.execute(httpget);
				entity=response.getEntity();
				is=entity.getContent();
				reader=new BufferedReader(new InputStreamReader(is,"UTF-8"),8);
				while((line=reader.readLine())!=null)
				{
					sb.append(line+"\n");
				}
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				System.out.println(e.toString());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println(e.toString());
			}
			
			result=sb.toString();
			System.out.println(result);
			Constants.pathEndLocation.clear();
			Constants.pathStartLocation.clear();
			//Constants.pathStartLocation.add(String.valueOf(gps.getLatitude())+","+gps.getLongitude());
			try {
				JsonExtract.ShopPathJsonParser(result);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//Constants.pathInstr.add(Constants.companyAddress);
			//Constants.pathEndLocation.add("Destination Location");
			
			//Constants.pathEndLocation.add(String.valueOf(latitude)+","+String.valueOf(longitude));
			
			System.out.println(Constants.pathEndLocation);
			System.out.println(Constants.pathStartLocation);
			
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(null);
			ProgressLog.progressDismiss();
			Drawpath();
		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			ProgressLog progress=new ProgressLog(ViewMap.this, "Loading",this);
		}
		
		private void Drawpath()
		{
			PolylineOptions poptions=new PolylineOptions();
			poptions.color(Color.BLACK);
			poptions.width(2f);
			for(int i=0;i<Constants.pathEndLocation.size();i++)
			{
				poptions.add(new LatLng(getLat(Constants.pathStartLocation.get(i)), getLng(Constants.pathStartLocation.get(i))));
				poptions.add(new LatLng(getLat(Constants.pathEndLocation.get(i)), getLng(Constants.pathEndLocation.get(i))));
				mMap.addMarker(new MarkerOptions().position(new LatLng(getLat(Constants.pathEndLocation.get(i)), getLng(Constants.pathEndLocation.get(i)))).icon(BitmapDescriptorFactory.fromResource(R.drawable.junction)).snippet(""+(i+1)));
			}
			mMap.addPolyline(poptions);
			if(userlat<32.6)
				mMap.animateCamera(CameraUpdateFactory.newLatLngBounds(new LatLngBounds(new LatLng(userlat, userlng), new LatLng(latitude, longitude)), 0));
			else
				mMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(userlat, userlng)));
			mMap.setOnMarkerClickListener(pathMarkerClickListener);
		}
		
		private double getLat(String geo)
		{
			String str[]=geo.split(",");
			System.out.println(str[0]);
			return Double.parseDouble(str[0]);
		}
		
		private double getLng(String geo)
		{
			String str[]=geo.split(",");
			System.out.println(str[1]);
			return Double.parseDouble(str[1]);
		}
		
	}
	
	Animation.AnimationListener pathaniListener=new AnimationListener() {
		
		@Override
		public void onAnimationStart(Animation arg0) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onAnimationRepeat(Animation arg0) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onAnimationEnd(Animation arg0) {
			// TODO Auto-generated method stub
			pathinstr.setText("");
		}
	};
	
	
	Animation.AnimationListener btnaniListener=new AnimationListener() {
		
		@Override
		public void onAnimationStart(Animation arg0) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onAnimationRepeat(Animation arg0) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void onAnimationEnd(Animation arg0) {
			// TODO Auto-generated method stub
			btn_enabled=false;
		}
	};
	
	GoogleMap.OnMarkerClickListener pathMarkerClickListener=new OnMarkerClickListener() {
		
		@Override
		public boolean onMarkerClick(Marker arg0) {
			// TODO Auto-generated method stub
			try
			{
			int id=Integer.valueOf(arg0.getSnippet());
			pathinstr.setVisibility(View.VISIBLE);
			pathinstr.setText(Html.fromHtml(Constants.pathInstr.get(id)));
			Animation ani=AnimationUtils.loadAnimation(getApplicationContext(), R.anim.mappth_in);
			ani.setFillAfter(true);
			ani.setAnimationListener(pathaniListener);
			pathinstr.startAnimation(ani);
			}
			catch(Exception e)
			{
				System.out.println(e.toString());
			}
			return false;
		}
	};
	
	View.OnTouchListener pathinstrtouch=new OnTouchListener() {
		
		@Override
		public boolean onTouch(View arg0, MotionEvent arg1) {
			// TODO Auto-generated method stub
			int action=arg1.getAction();
			switch(action)
			{
			case MotionEvent.ACTION_DOWN:
				Animation ani=AnimationUtils.loadAnimation(getApplicationContext(), R.anim.mappth_out);
				ani.setFillAfter(true);
				ani.setAnimationListener(pathaniListener);
				pathinstr.startAnimation(ani);
			}
			return false;
		}
	};
	
	GoogleMap.OnMapClickListener mapclick=new OnMapClickListener() {
		
		@Override
		public void onMapClick(LatLng arg0) {
			// TODO Auto-generated method stub
			if(!btn_enabled)
			{
			Animation ani=AnimationUtils.loadAnimation(getApplicationContext(), R.anim.map_btn_in);
			ani.setFillAfter(true);
			btn_enabled=true;
			ani.setAnimationListener(btnaniListener);
			map_btn_layout.startAnimation(ani);
			}
			else
			{
				Animation ani=AnimationUtils.loadAnimation(getApplicationContext(), R.anim.map_btn_out);
				ani.setFillAfter(true);
				btn_enabled=false;
				map_btn_layout.startAnimation(ani);
			}
		}
	};
	
	GoogleMap.OnCameraChangeListener mapchange=new OnCameraChangeListener() {
		
		@Override
		public void onCameraChange(CameraPosition arg0) {
			// TODO Auto-generated method stub
			Animation ani=AnimationUtils.loadAnimation(getApplicationContext(), R.anim.map_btn_in);
			ani.setFillAfter(true);
			ani.setAnimationListener(btnaniListener);
			map_btn_layout.startAnimation(ani);
		}
	};
}
